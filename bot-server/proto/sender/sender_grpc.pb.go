// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sender

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SendClient is the client API for Send service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendClient interface {
	SendMsg(ctx context.Context, in *SendReq, opts ...grpc.CallOption) (*SendResp, error)
}

type sendClient struct {
	cc grpc.ClientConnInterface
}

func NewSendClient(cc grpc.ClientConnInterface) SendClient {
	return &sendClient{cc}
}

func (c *sendClient) SendMsg(ctx context.Context, in *SendReq, opts ...grpc.CallOption) (*SendResp, error) {
	out := new(SendResp)
	err := c.cc.Invoke(ctx, "/senderBot.Send/SendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendServer is the server API for Send service.
// All implementations must embed UnimplementedSendServer
// for forward compatibility
type SendServer interface {
	SendMsg(context.Context, *SendReq) (*SendResp, error)
	mustEmbedUnimplementedSendServer()
}

// UnimplementedSendServer must be embedded to have forward compatible implementations.
type UnimplementedSendServer struct {
}

func (UnimplementedSendServer) SendMsg(context.Context, *SendReq) (*SendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedSendServer) mustEmbedUnimplementedSendServer() {}

// UnsafeSendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendServer will
// result in compilation errors.
type UnsafeSendServer interface {
	mustEmbedUnimplementedSendServer()
}

func RegisterSendServer(s grpc.ServiceRegistrar, srv SendServer) {
	s.RegisterService(&Send_ServiceDesc, srv)
}

func _Send_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/senderBot.Send/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServer).SendMsg(ctx, req.(*SendReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Send_ServiceDesc is the grpc.ServiceDesc for Send service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Send_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "senderBot.Send",
	HandlerType: (*SendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMsg",
			Handler:    _Send_SendMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sender/sender.proto",
}
